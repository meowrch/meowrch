#!/bin/bash

# Meowrch Profile Management Script
# Switches between performance profiles: performance, balanced, powersave

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

SCRIPT_NAME="Profile Manager"
PROFILE_FILE="/etc/meowrch/current-profile"
PROFILES_DIR="/etc/meowrch/profiles"

log() {
    echo -e "${GREEN}[${SCRIPT_NAME}]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[${SCRIPT_NAME}]${NC} $1"
}

error() {
    echo -e "${RED}[${SCRIPT_NAME}]${NC} $1"
}

info() {
    echo -e "${BLUE}[${SCRIPT_NAME}]${NC} $1"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Function to create profiles directory structure
create_profiles_structure() {
    mkdir -p "$PROFILES_DIR"
    
    # Create performance profile
    cat > "$PROFILES_DIR/performance.conf" << 'EOF'
# Performance Profile - Maximum performance
PROFILE_NAME="performance"
PROFILE_DESCRIPTION="Maximum performance for gaming and intensive tasks"

# CPU Settings
CPU_GOVERNOR="performance"
CPU_TURBO_ENABLED="1"
CPU_IDLE_DISABLED="1"

# GPU Settings
GPU_PERFORMANCE_LEVEL="high"
NVIDIA_POWER_LIMIT="max"

# Memory Settings
VM_SWAPPINESS="1"
VM_DIRTY_RATIO="15"
VM_DIRTY_BACKGROUND_RATIO="5"

# I/O Settings
IO_SCHEDULER_SSD="none"
IO_SCHEDULER_HDD="mq-deadline"

# Network Settings
NETWORK_CONGESTION="bbr"
NETWORK_QUEUE_DISCIPLINE="fq"

# Audio Settings
AUDIO_LATENCY="low"
PIPEWIRE_QUANTUM="512"
EOF

    # Create balanced profile
    cat > "$PROFILES_DIR/balanced.conf" << 'EOF'
# Balanced Profile - Good performance with power efficiency
PROFILE_NAME="balanced"
PROFILE_DESCRIPTION="Balanced performance and power consumption"

# CPU Settings
CPU_GOVERNOR="performance"
CPU_TURBO_ENABLED="1"
CPU_IDLE_DISABLED="0"

# GPU Settings
GPU_PERFORMANCE_LEVEL="auto"
NVIDIA_POWER_LIMIT="default"

# Memory Settings
VM_SWAPPINESS="10"
VM_DIRTY_RATIO="10"
VM_DIRTY_BACKGROUND_RATIO="5"

# I/O Settings
IO_SCHEDULER_SSD="none"
IO_SCHEDULER_HDD="mq-deadline"

# Network Settings
NETWORK_CONGESTION="bbr"
NETWORK_QUEUE_DISCIPLINE="fq_codel"

# Audio Settings
AUDIO_LATENCY="normal"
PIPEWIRE_QUANTUM="1024"
EOF

    # Create powersave profile
    cat > "$PROFILES_DIR/powersave.conf" << 'EOF'
# Powersave Profile - Maximum battery life
PROFILE_NAME="powersave"
PROFILE_DESCRIPTION="Maximum power savings for extended battery life"

# CPU Settings
CPU_GOVERNOR="powersave"
CPU_TURBO_ENABLED="0"
CPU_IDLE_DISABLED="0"

# GPU Settings
GPU_PERFORMANCE_LEVEL="low"
NVIDIA_POWER_LIMIT="min"

# Memory Settings
VM_SWAPPINESS="60"
VM_DIRTY_RATIO="5"
VM_DIRTY_BACKGROUND_RATIO="2"

# I/O Settings
IO_SCHEDULER_SSD="none"
IO_SCHEDULER_HDD="mq-deadline"

# Network Settings
NETWORK_CONGESTION="cubic"
NETWORK_QUEUE_DISCIPLINE="fq_codel"

# Audio Settings
AUDIO_LATENCY="normal"
PIPEWIRE_QUANTUM="2048"
EOF

    log "Profile configurations created"
}

# Function to apply CPU settings
apply_cpu_settings() {
    local governor="$1"
    local turbo_enabled="$2"
    local idle_disabled="$3"
    
    log "Applying CPU settings: governor=$governor, turbo=$turbo_enabled, idle_disabled=$idle_disabled"
    
    # Set CPU governor
    for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
        if [[ -f "$cpu" ]]; then
            echo "$governor" > "$cpu" 2>/dev/null || warn "Failed to set governor for $(basename $(dirname "$cpu"))"
        fi
    done
    
    # Control turbo boost
    if [[ -f /sys/devices/system/cpu/intel_pstate/no_turbo ]]; then
        # Intel turbo boost
        if [[ "$turbo_enabled" == "1" ]]; then
            echo "0" > /sys/devices/system/cpu/intel_pstate/no_turbo
        else
            echo "1" > /sys/devices/system/cpu/intel_pstate/no_turbo
        fi
    elif [[ -f /sys/devices/system/cpu/cpufreq/boost ]]; then
        # AMD turbo boost
        echo "$turbo_enabled" > /sys/devices/system/cpu/cpufreq/boost
    fi
    
    # Control CPU idle states
    if command -v cpupower &> /dev/null; then
        if [[ "$idle_disabled" == "1" ]]; then
            cpupower idle-set -D 0 &> /dev/null || warn "Failed to disable idle states"
        else
            cpupower idle-set -E &> /dev/null || warn "Failed to enable idle states"
        fi
    fi
}

# Function to apply GPU settings
apply_gpu_settings() {
    local performance_level="$1"
    local nvidia_power_limit="$2"
    
    log "Applying GPU settings: performance_level=$performance_level, nvidia_power=$nvidia_power_limit"
    
    # NVIDIA GPU settings
    if command -v nvidia-smi &> /dev/null; then
        case "$nvidia_power_limit" in
            "max")
                nvidia-smi -pl $(nvidia-smi --query-gpu=power.max_limit --format=csv,noheader,nounits) &> /dev/null || warn "Failed to set max power limit"
                ;;
            "min")
                nvidia-smi -pl $(nvidia-smi --query-gpu=power.min_limit --format=csv,noheader,nounits) &> /dev/null || warn "Failed to set min power limit"
                ;;
            "default")
                nvidia-smi -pl $(nvidia-smi --query-gpu=power.default_limit --format=csv,noheader,nounits) &> /dev/null || warn "Failed to set default power limit"
                ;;
        esac
    fi
    
    # AMD GPU settings
    if [[ -f /sys/class/drm/card0/device/power_dpm_force_performance_level ]]; then
        case "$performance_level" in
            "high")
                echo "high" > /sys/class/drm/card0/device/power_dpm_force_performance_level 2>/dev/null || warn "Failed to set high performance"
                ;;
            "low")
                echo "low" > /sys/class/drm/card0/device/power_dpm_force_performance_level 2>/dev/null || warn "Failed to set low performance"
                ;;
            "auto")
                echo "auto" > /sys/class/drm/card0/device/power_dpm_force_performance_level 2>/dev/null || warn "Failed to set auto performance"
                ;;
        esac
    else
        warn "AMD GPU power management not available (likely using NVIDIA GPU)"
    fi
}

# Function to apply memory settings
apply_memory_settings() {
    local swappiness="$1"
    local dirty_ratio="$2"
    local dirty_background_ratio="$3"
    
    log "Applying memory settings: swappiness=$swappiness, dirty_ratio=$dirty_ratio"
    
    # Apply sysctl settings
    sysctl -w vm.swappiness="$swappiness" &> /dev/null || warn "Failed to set swappiness"
    sysctl -w vm.dirty_ratio="$dirty_ratio" &> /dev/null || warn "Failed to set dirty_ratio"
    sysctl -w vm.dirty_background_ratio="$dirty_background_ratio" &> /dev/null || warn "Failed to set dirty_background_ratio"
}

# Function to apply I/O settings
apply_io_settings() {
    local scheduler_ssd="$1"
    local scheduler_hdd="$2"
    
    log "Applying I/O settings: SSD=$scheduler_ssd, HDD=$scheduler_hdd"
    
    # Set schedulers based on device type
    for device in /sys/block/*/queue/scheduler; do
        if [[ -f "$device" ]]; then
            device_name=$(basename $(dirname $(dirname "$device")))
            
            if [[ -f "/sys/block/$device_name/queue/rotational" ]]; then
                rotational=$(cat "/sys/block/$device_name/queue/rotational")
                
                if [[ "$rotational" == "0" ]]; then
                    # SSD
                    if grep -q "$scheduler_ssd" "$device"; then
                        echo "$scheduler_ssd" > "$device"
                    fi
                else
                    # HDD
                    if grep -q "$scheduler_hdd" "$device"; then
                        echo "$scheduler_hdd" > "$device"
                    fi
                fi
            fi
        fi
    done
}

# Function to apply network settings
apply_network_settings() {
    local congestion="$1"
    local queue_discipline="$2"
    
    log "Applying network settings: congestion=$congestion, qdisc=$queue_discipline"
    
    # Set TCP congestion control
    echo "$congestion" > /proc/sys/net/ipv4/tcp_congestion_control 2>/dev/null || warn "Failed to set congestion control"
    
    # Set queue discipline for network interfaces
    for interface in /sys/class/net/*/queues/tx-0; do
        if [[ -d "$interface" ]]; then
            interface_name=$(basename $(dirname $(dirname "$interface")))
            
            # Skip loopback
            if [[ "$interface_name" != "lo" ]]; then
                tc qdisc replace dev "$interface_name" root "$queue_discipline" 2>/dev/null || warn "Failed to set qdisc for $interface_name"
            fi
        fi
    done
}

# Function to apply audio settings
apply_audio_settings() {
    local latency="$1"
    local quantum="$2"
    
    log "Applying audio settings: latency=$latency, quantum=$quantum"
    
    # Update PipeWire quantum settings
    local pipewire_conf="/etc/pipewire/pipewire.conf.d/99-meowrch-profile.conf"
    
    cat > "$pipewire_conf" << EOF
# Meowrch Profile Audio Settings
context.properties = {
    default.clock.quantum = $quantum
    default.clock.min-quantum = $((quantum / 2))
    default.clock.max-quantum = $((quantum * 2))
}
EOF

    # Restart PipeWire for users
    # Get the original user if running with sudo
    if [[ -n "${SUDO_USER:-}" ]]; then
        sudo -u "$SUDO_USER" XDG_RUNTIME_DIR="/run/user/$(id -u $SUDO_USER)" systemctl --user restart pipewire 2>/dev/null || warn "Failed to restart PipeWire"
    else
        # If not running with sudo, try to restart for current user
        systemctl --user restart pipewire 2>/dev/null || warn "Failed to restart PipeWire"
    fi
}

# Function to load and apply profile
apply_profile() {
    local profile_name="$1"
    local profile_file="$PROFILES_DIR/$profile_name.conf"
    
    if [[ ! -f "$profile_file" ]]; then
        error "Profile '$profile_name' not found"
        return 1
    fi
    
    log "Applying profile: $profile_name"
    
    # Source the profile configuration
    source "$profile_file"
    
    # Apply all settings
    apply_cpu_settings "$CPU_GOVERNOR" "$CPU_TURBO_ENABLED" "$CPU_IDLE_DISABLED"
    apply_gpu_settings "$GPU_PERFORMANCE_LEVEL" "$NVIDIA_POWER_LIMIT"
    apply_memory_settings "$VM_SWAPPINESS" "$VM_DIRTY_RATIO" "$VM_DIRTY_BACKGROUND_RATIO"
    apply_io_settings "$IO_SCHEDULER_SSD" "$IO_SCHEDULER_HDD"
    apply_network_settings "$NETWORK_CONGESTION" "$NETWORK_QUEUE_DISCIPLINE"
    apply_audio_settings "$AUDIO_LATENCY" "$PIPEWIRE_QUANTUM"
    
    # Save current profile
    mkdir -p "$(dirname "$PROFILE_FILE")"
    echo "$profile_name" > "$PROFILE_FILE"
    
    log "Profile '$profile_name' applied successfully"
    info "$PROFILE_DESCRIPTION"
}

# Function to show current profile
show_current_profile() {
    if [[ -f "$PROFILE_FILE" ]]; then
        local current_profile=$(cat "$PROFILE_FILE")
        local profile_file="$PROFILES_DIR/$current_profile.conf"
        
        if [[ -f "$profile_file" ]]; then
            source "$profile_file"
            info "=== Current Profile ==="
            echo "Profile: $PROFILE_NAME"
            echo "Description: $PROFILE_DESCRIPTION"
            echo ""
            echo "CPU Governor: $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor 2>/dev/null || echo "unknown")"
            echo "VM Swappiness: $(sysctl -n vm.swappiness 2>/dev/null || echo "unknown")"
        else
            warn "Profile configuration file not found"
        fi
    else
        warn "No profile currently set"
    fi
}

# Function to list available profiles
list_profiles() {
    info "=== Available Profiles ==="
    
    for profile_file in "$PROFILES_DIR"/*.conf; do
        if [[ -f "$profile_file" ]]; then
            source "$profile_file"
            echo "- $PROFILE_NAME: $PROFILE_DESCRIPTION"
        fi
    done
}

# Function to show help
show_help() {
    echo "Meowrch Profile Management Script"
    echo "Usage: $0 [OPTION] [PROFILE]"
    echo ""
    echo "Profiles:"
    echo "  performance      Maximum performance mode"
    echo "  balanced         Balanced performance and power"
    echo "  powersave        Maximum power savings"
    echo ""
    echo "Options:"
    echo "  --set, -s        Set profile (requires profile name)"
    echo "  --current, -c    Show current profile"
    echo "  --list, -l       List available profiles"
    echo "  --help, -h       Show this help message"
    echo ""
    echo "Examples:"
    echo "  sudo $0 --set performance    # Set performance profile"
    echo "  sudo $0 --set balanced       # Set balanced profile"
    echo "  $0 --current                 # Show current profile"
    echo "  $0 --list                    # List all profiles"
}

# Main execution
main() {
    # Initialize profiles if they don't exist
    if [[ ! -d "$PROFILES_DIR" ]]; then
        create_profiles_structure
    fi
    
    case "${1:-}" in
        --set|-s)
            if [[ -z "${2:-}" ]]; then
                error "Profile name required"
                show_help
                exit 1
            fi
            check_root
            apply_profile "$2"
            ;;
        --current|-c)
            show_current_profile
            ;;
        --list|-l)
            list_profiles
            ;;
        --help|-h)
            show_help
            ;;
        performance|balanced|powersave)
            check_root
            apply_profile "$1"
            ;;
        *)
            show_help
            ;;
    esac
}

# Run main function
main "$@"
