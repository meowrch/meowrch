#!/bin/bash

# Meowrch Game Performance Script
# Switches system to gaming mode for optimal performance

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

SCRIPT_NAME="Game Performance"
LOCK_FILE="/tmp/meowrch-game-mode.lock"
ORIGINAL_SETTINGS="/tmp/meowrch-original-settings"

log() {
    echo -e "${GREEN}[${SCRIPT_NAME}]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[${SCRIPT_NAME}]${NC} $1"
}

error() {
    echo -e "${RED}[${SCRIPT_NAME}]${NC} $1"
}

info() {
    echo -e "${BLUE}[${SCRIPT_NAME}]${NC} $1"
}

# Function to check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Function to save original settings
save_original_settings() {
    log "Saving original system settings..."
    
    # Save CPU governor
    if [[ -f /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor ]]; then
        cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor > "$ORIGINAL_SETTINGS.cpu_governor"
    fi
    
    # Save GPU power management (NVIDIA)
    if command -v nvidia-smi &> /dev/null; then
        nvidia-smi --query-gpu=power.management --format=csv,noheader,nounits > "$ORIGINAL_SETTINGS.nvidia_pm" 2>/dev/null || true
    fi
    
    # Save current nice values for important processes
    pgrep -x "pipewire|wireplumber|pulseaudio" | while read -r pid; do
        if [[ -f "/proc/$pid/stat" ]]; then
            awk '{print $19}' "/proc/$pid/stat" >> "$ORIGINAL_SETTINGS.audio_nice"
        fi
    done 2>/dev/null || true
}

# Function to restore original settings
restore_original_settings() {
    log "Restoring original system settings..."
    
    # Restore CPU governor
    if [[ -f "$ORIGINAL_SETTINGS.cpu_governor" ]]; then
        governor=$(cat "$ORIGINAL_SETTINGS.cpu_governor")
        for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
            if [[ -f "$cpu" ]]; then
                echo "$governor" > "$cpu"
            fi
        done
        log "CPU governor restored to: $governor"
    fi
    
    # Restore GPU settings (NVIDIA)
    if command -v nvidia-smi &> /dev/null; then
        # Reset to default clocks
        nvidia-smi -rgc &> /dev/null || warn "Failed to reset NVIDIA GPU clocks"
        nvidia-smi -rmc &> /dev/null || warn "Failed to reset NVIDIA memory clocks"
        log "NVIDIA GPU settings restored"
    fi
    
    # Clean up
    rm -f "$ORIGINAL_SETTINGS".*
}

# Function to enable gaming mode
enable_gaming_mode() {
    log "Enabling gaming mode..."
    
    save_original_settings
    
    # Set CPU governor to performance
    if [[ -d /sys/devices/system/cpu/cpu0/cpufreq ]]; then
        for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
            if [[ -f "$cpu" ]]; then
                echo "performance" > "$cpu"
            fi
        done
        log "CPU governor set to performance"
    fi
    
    # Optimize GPU (NVIDIA)
    if command -v nvidia-smi &> /dev/null; then
        # Set maximum performance mode
        if nvidia-smi -pm 1 &> /dev/null; then
            log "NVIDIA persistence mode enabled"
        else
            warn "Failed to set NVIDIA persistence mode"
        fi
        
        # Lock clocks to maximum
        max_clocks=$(nvidia-smi --query-gpu=clocks.max.memory,clocks.max.graphics --format=csv,noheader,nounits | tr ',' ' ')
        if [[ -n "$max_clocks" ]]; then
            if nvidia-smi -ac $max_clocks &> /dev/null; then
                log "NVIDIA GPU clocks locked to maximum"
            else
                warn "Failed to set NVIDIA max clocks (may require cooling or power limit adjustment)"
            fi
        fi
    fi
    
    # Set audio processes to high priority
    pgrep -x "pipewire|wireplumber|pulseaudio" | while read -r pid; do
        renice -10 "$pid" &> /dev/null || true
    done 2>/dev/null || true
    log "Audio processes priority increased"
    
    # Disable CPU power saving
    if command -v cpupower &> /dev/null; then
        cpupower frequency-set -g performance &> /dev/null || warn "Failed to set CPU frequency governor"
        cpupower idle-set -D 0 &> /dev/null || warn "Failed to disable CPU idle states"
    fi
    
    # Set I/O scheduler to performance
    for device in /sys/block/*/queue/scheduler; do
        if [[ -f "$device" ]]; then
            if grep -q "none" "$device"; then
                echo "none" > "$device"
            elif grep -q "mq-deadline" "$device"; then
                echo "mq-deadline" > "$device"
            fi
        fi
    done
    
    # Enable gamemode if available
    if command -v gamemoded &> /dev/null; then
        # Get the actual user who ran sudo
        if [[ -n "${SUDO_USER:-}" ]]; then
            sudo -u "$SUDO_USER" systemctl --user start gamemoded &> /dev/null || warn "Failed to start gamemoded for user $SUDO_USER"
            log "GameMode daemon started for user $SUDO_USER"
        else
            warn "Cannot start GameMode: not running via sudo"
        fi
    fi
    
    # Create lock file
    touch "$LOCK_FILE"
    
    log "Gaming mode enabled successfully!"
    info "System is now optimized for gaming performance"
    info "Run 'sudo game-performance --disable' to restore normal settings"
}

# Function to disable gaming mode
disable_gaming_mode() {
    log "Disabling gaming mode..."
    
    if [[ ! -f "$LOCK_FILE" ]]; then
        warn "Gaming mode is not currently enabled"
        return
    fi
    
    restore_original_settings
    
    # Stop gamemode
    if command -v gamemoded &> /dev/null; then
        # Get the actual user who ran sudo
        if [[ -n "${SUDO_USER:-}" ]]; then
            sudo -u "$SUDO_USER" systemctl --user stop gamemoded &> /dev/null || warn "Failed to stop gamemoded for user $SUDO_USER"
            log "GameMode daemon stopped for user $SUDO_USER"
        else
            warn "Cannot stop GameMode: not running via sudo"
        fi
    fi
    
    # Remove lock file
    rm -f "$LOCK_FILE"
    
    log "Gaming mode disabled successfully!"
    info "System settings restored to normal"
}

# Function to show current status
show_status() {
    info "=== Gaming Mode Status ==="
    
    if [[ -f "$LOCK_FILE" ]]; then
        echo -e "${GREEN}Gaming Mode: ENABLED${NC}"
    else
        echo -e "${YELLOW}Gaming Mode: DISABLED${NC}"
    fi
    
    # Show CPU governor
    if [[ -f /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor ]]; then
        governor=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
        echo "CPU Governor: $governor"
    fi
    
    # Show GPU status
    if command -v nvidia-smi &> /dev/null; then
        echo "GPU: NVIDIA detected"
        nvidia-smi --query-gpu=name,power.draw,clocks.current.graphics,clocks.current.memory --format=csv,noheader 2>/dev/null | head -1 || echo "GPU info unavailable"
    fi
    
    # Show GameMode status
    if command -v gamemoded &> /dev/null; then
        # Try to check as the actual user first
        if [[ -n "${SUDO_USER:-}" ]]; then
            if sudo -u "$SUDO_USER" systemctl --user is-active gamemoded &> /dev/null; then
                echo "GameMode: Active (user: $SUDO_USER)"
            else
                echo "GameMode: Inactive"
            fi
        else
            # Fallback for non-sudo usage
            if systemctl --user is-active gamemoded &> /dev/null; then
                echo "GameMode: Active"
            else
                echo "GameMode: Inactive"
            fi
        fi
    fi
}

# Function to show help
show_help() {
    echo "Meowrch Game Performance Script"
    echo "Usage: $0 [OPTION]"
    echo ""
    echo "Options:"
    echo "  --enable, -e     Enable gaming mode"
    echo "  --disable, -d    Disable gaming mode"
    echo "  --status, -s     Show current status"
    echo "  --help, -h       Show this help message"
    echo ""
    echo "Examples:"
    echo "  sudo $0 --enable     # Enable gaming mode"
    echo "  sudo $0 --disable    # Disable gaming mode"
    echo "  $0 --status          # Show status (no root required)"
}

# Main execution
main() {
    case "${1:-}" in
        --enable|-e)
            check_root
            enable_gaming_mode
            ;;
        --disable|-d)
            check_root
            disable_gaming_mode
            ;;
        --status|-s)
            show_status
            ;;
        --help|-h)
            show_help
            ;;
        *)
            if [[ -f "$LOCK_FILE" ]]; then
                check_root
                disable_gaming_mode
            else
                check_root
                enable_gaming_mode
            fi
            ;;
    esac
}

# Run main function
main "$@"
