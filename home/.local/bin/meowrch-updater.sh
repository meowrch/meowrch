#!/bin/bash
#
# Meowrch Update Checker - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
#

set -euo pipefail

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
readonly GITHUB_API_URL="https://api.github.com/repos/meowrch/meowrch/releases"
readonly VERSION_FILE="/usr/local/share/meowrch/users/$(whoami)/version"
readonly NOTIFICATION_STATE="$HOME/.local/state/meowrch-notifications"

# –¶–≤–µ—Ç–∞
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞
log() {
    echo -e "${GREEN}[INFO]${NC} $1" >&2
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" >&2
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

# –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
get_current_version() {
    if [[ -f "$VERSION_FILE" ]]; then
        cat "$VERSION_FILE"
    else
        echo "2.0"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    fi
}

# –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Å GitHub
get_latest_version() {
    curl -s "$GITHUB_API_URL" | jq -r '.[0].tag_name' | sed 's/^v//'
}

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–ª–∏–∑—ã, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤–µ—Ä—Å–∏–∏
get_all_releases() {
    curl -s "$GITHUB_API_URL" | jq -r '.[].tag_name' | sed 's/^v//' | sort -V
}

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é
set_version() {
    local version="$1"
    sudo mkdir -p "$(dirname "$VERSION_FILE")"
    echo "$version" | sudo tee "$VERSION_FILE" > /dev/null
    log "‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ $version"
}

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π (v1 > v2)
version_gt() {
    printf '%s\n%s\n' "$2" "$1" | sort -V -C
}

# –°–∫–∞—á–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
run_migration() {
    local version="$1"
    local temp_dir="/tmp/meowrch-migration-$$"
    mkdir -p "$temp_dir"
    
    log "üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –≤–µ—Ä—Å–∏—é $version..."
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ª–∏–∑–∞
    local release_data
    release_data=$(curl -s "$GITHUB_API_URL" | jq --arg version "$version" '.[] | select(.tag_name == $version)')
    
    # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
    local download_url
    download_url=$(echo "$release_data" | jq -r --arg filename "migrate_to_$version.py" '.assets[] | select(.name == $filename) | .browser_download_url')
    
    if [[ -z "$download_url" || "$download_url" == "null" ]]; then
        warn "–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ migrate_to_$version.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
        set_version "$version"
        rm -rf "$temp_dir"
        return 0
    fi
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    local migration_file="$temp_dir/migrate_to_$version.py"
    if ! curl -L -s "$download_url" -o "$migration_file"; then
        error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏"
        rm -rf "$temp_dir"
        return 1
    fi
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if python3 "$migration_file"; then
        log "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –≤–µ—Ä—Å–∏—é $version –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
        set_version "$version"
    else
        error "–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ –≤–µ—Ä—Å–∏—é $version –Ω–µ —É–¥–∞–ª–∞—Å—å"
        rm -rf "$temp_dir"
        return 1
    fi
    
    rm -rf "$temp_dir"
    return 0
}

# –ù–∞–π—Ç–∏ –ø—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏
find_update_path() {
    local current_version="$1"
    local target_version="$2"
    local -a all_releases
    local -a path=()
    
    mapfile -t all_releases < <(get_all_releases)
    
    for release in "${all_releases[@]}"; do
        # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –∏ <= —Ü–µ–ª–µ–≤–æ–π (–Ω–æ –Ω–µ —Å–∞–º—É —Ç–µ–∫—É—â—É—é)
        if version_gt "$release" "$current_version" && [[ "$release" != "$current_version" ]] && (version_gt "$target_version" "$release" || [[ "$release" == "$target_version" ]]); then
            path+=("$release")
        fi
    done
    
    printf '%s\n' "${path[@]}"
}

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä—Å–∏–∏
is_version_notified() {
    local version="$1"
    [[ -f "$NOTIFICATION_STATE" ]] && grep -q "^$version$" "$NOTIFICATION_STATE"
}

# –û—Ç–º–µ—Ç–∏—Ç—å –≤–µ—Ä—Å–∏—é –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—É—é
mark_version_notified() {
    local version="$1"
    mkdir -p "$(dirname "$NOTIFICATION_STATE")"
    echo "$version" >> "$NOTIFICATION_STATE"
}

notify_user() {
    local latest_version="$1"
    local current_version="$2"
    
    # Desktop —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if command -v notify-send > /dev/null 2>&1; then
        notify-send \
            "üîÑ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Meowrch!" \
            "–î–æ—Å—Ç—É–ø–Ω–∞ –≤–µ—Ä—Å–∏—è $latest_version (—Ç–µ–∫—É—â–∞—è: $current_version)" \
            --icon="software-update-available" \
            --urgency=normal
    fi
    
    log "üÜï –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $latest_version (—Ç–µ–∫—É—â–∞—è: $current_version)"
    log "üí° –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 update"
}

check_update() {
    local current_version
    current_version=$(get_current_version)
    
    log "–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è... (—Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $current_version)"
    
    local latest_version
    latest_version=$(get_latest_version)

    if version_gt "$latest_version" "$current_version"; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if is_version_notified "$latest_version"; then
            log "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä—Å–∏–∏ $latest_version —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–æ"
            return 0
        fi
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notify_user "$latest_version" "$current_version"
        mark_version_notified "$latest_version"
    else
        log "‚úÖ –£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è ($current_version)"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
show_status() {
    local current_version
    current_version=$(get_current_version)
    local latest_version
    latest_version=$(get_latest_version)
    
    log "üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $current_version"
    log "üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: $latest_version"
    
    if [[ "$current_version" == "$latest_version" ]]; then
        log "‚úÖ –£ –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è"
    elif version_gt "$latest_version" "$current_version"; then
        log "üÜï –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –≤–µ—Ä—Å–∏–∏ $latest_version"
    else
        log "‚ÑπÔ∏è –í–∞—à–∞ –≤–µ—Ä—Å–∏—è –Ω–æ–≤–µ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞"
    fi
}

# –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
perform_update() {
    local target_version="${1:-latest}"
    local current_version
    current_version=$(get_current_version)

    if [[ "$target_version" == "latest" ]]; then
        target_version=$(get_latest_version)
    fi

    log "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å $current_version –¥–æ $target_version"

    if [[ "$current_version" == "$target_version" ]]; then
        log "‚úÖ –í–µ—Ä—Å–∏—è $target_version —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        return 0
    fi

    # –ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    local -a update_path
    mapfile -t update_path < <(find_update_path "$current_version" "$target_version")

    if [[ ${#update_path[@]} -eq 0 ]]; then
        warn "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ"
        return 0
    fi

    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –≤–µ—Ä—Å–∏–π
    local path_display="$current_version"
    for version in "${update_path[@]}"; do
        path_display+=" ‚Üí $version"
    done
    log "üìã –ü—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $path_display"

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –≤–µ—Ä—Å–∏—è–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
    for version in "${update_path[@]}"; do
        if ! run_migration "$version"; then
            error "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –Ω–∞ –≤–µ—Ä—Å–∏–∏ $version"
            return 1
        fi
    done

    log "üéâ –í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
show_help() {
    cat << EOF
Meowrch Update Checker - —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    $0 COMMAND [VERSION]

–ö–û–ú–ê–ù–î–´:
    check-update     –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏ —É–≤–µ–¥–æ–º–∏—Ç—å
    status          –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–µ—Ä—Å–∏–π
    update          –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
    update VERSION  –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    help            –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–†–ò–ú–ï–†–´:
    $0 check-update      # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    $0 status           # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
    $0 update           # –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
    $0 update 3.0.0     # –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ –≤–µ—Ä—Å–∏–∏ 3.0.0

EOF
}

main() {
    for cmd in curl jq; do
        if ! command -v "$cmd" > /dev/null 2>&1; then
            error "–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–∏–ª–∏—Ç–∞: $cmd"
            exit 1
        fi
    done

    local command="${1:-check-update}"
    
    case "$command" in
        check-update)
            check_update
            ;;
        status)
            show_status
            ;;
        update)
            perform_update "${2:-latest}"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            show_help
            exit 1
            ;;
    esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
