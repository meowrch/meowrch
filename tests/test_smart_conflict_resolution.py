#!/usr/bin/env python3
import shutil
import sys
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from Builder.utils.mkinitcpio_config import MkinitcpioConfigEditor
from Builder.utils.mkinitcpio_rules import MkinitcpioRules


def create_test_mkinitcpio_file(hooks: str) -> Path:
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª mkinitcpio.conf —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ö—É–∫–∞–º–∏"""
    content = f'''# vim:set ft=sh
MODULES=()
BINARIES=()
FILES=()
HOOKS=({hooks})
'''
    
    tmp_file = tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_smart_test')
    tmp_file.write(content)
    tmp_file.close()
    return Path(tmp_file.name)


def test_smart_conflict_resolution():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–º–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    print("üß† –¢–µ—Å—Ç —É–º–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç A B, –Ω–æ —Å —É–º–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    test_file = create_test_mkinitcpio_file("base systemd A B filesystems fsck")
    print(f"–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file}")
    
    try:
        editor = MkinitcpioConfigEditor(test_file)
        
        def mock_run_sudo(command, input=None):
            if command[0] == "cat":
                return test_file.read_text()
            elif command[0] == "cp":
                shutil.copy(command[1], command[2])
                return ""
            return ""
        
        editor._run_sudo = mock_run_sudo
        
        print("–ò—Å—Ö–æ–¥–Ω—ã–µ —Ö—É–∫–∏:")
        initial_hooks = editor.list_hooks()
        print(f"  {initial_hooks}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å plymouth –ø–æ—Å–ª–µ B, –Ω–æ –¥–æ A
        print("\nüéØ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å plymouth –ø–æ—Å–ª–µ B, –Ω–æ –¥–æ A")
        print("–û–∂–∏–¥–∞–µ–º: —É–º–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤")
        
        editor.add_hook('plymouth', after_hook='B', before_hook='A')
        
        final_hooks = editor.list_hooks()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {final_hooks}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ plymouth —Ä–∞–∑–º–µ—â–µ–Ω —Ä–∞–∑—É–º–Ω–æ
        if 'plymouth' in final_hooks:
            plymouth_idx = final_hooks.index('plymouth')
            print(f"Plymouth —Ä–∞–∑–º–µ—â–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ {plymouth_idx}")
            print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
        
    finally:
        test_file.unlink()
        print("–£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")


def test_plymouth_smart_placement():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–º–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ Plymouth"""
    print("\nüé≠ –¢–µ—Å—Ç —É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è Plymouth")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    test_file = create_test_mkinitcpio_file("base systemd autodetect modconf kms block encrypt filesystems fsck")
    
    try:
        editor = MkinitcpioConfigEditor(test_file)
        
        def mock_run_sudo(command, input=None):
            if command[0] == "cat":
                return test_file.read_text()
            elif command[0] == "cp":
                shutil.copy(command[1], command[2])
                return ""
            return ""
        
        editor._run_sudo = mock_run_sudo
        
        print("–ò—Å—Ö–æ–¥–Ω—ã–µ —Ö—É–∫–∏ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è):")
        initial_hooks = editor.list_hooks()
        print(f"  {initial_hooks}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º plymouth –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ - –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —É–º–Ω–æ!
        print("\nüéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ plymouth –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏")
        print("–û–∂–∏–¥–∞–µ–º: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª")
        
        editor.add_hook('plymouth')
        
        final_hooks = editor.list_hooks()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {final_hooks}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        if 'plymouth' in final_hooks:
            plymouth_idx = final_hooks.index('plymouth')
            kms_idx = final_hooks.index('kms') if 'kms' in final_hooks else -1
            encrypt_idx = final_hooks.index('encrypt') if 'encrypt' in final_hooks else len(final_hooks)
            
            print(f"–ü–æ–∑–∏—Ü–∏–∏: kms={kms_idx}, plymouth={plymouth_idx}, encrypt={encrypt_idx}")
            
            # Plymouth –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ kms, –Ω–æ –¥–æ encrypt
            if kms_idx < plymouth_idx < encrypt_idx:
                print("‚úÖ Plymouth –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω: –ø–æ—Å–ª–µ kms, –¥–æ encrypt")
            else:
                print("‚ùå Plymouth —Ä–∞–∑–º–µ—â–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
    finally:
        test_file.unlink()


def test_complex_dependencies():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\n‚ö° –¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 30)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å LVM –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º
    test_file = create_test_mkinitcpio_file("base systemd autodetect block encrypt filesystems fsck")
    
    try:
        editor = MkinitcpioConfigEditor(test_file)
        
        def mock_run_sudo(command, input=None):
            if command[0] == "cat":
                return test_file.read_text()
            elif command[0] == "cp":
                shutil.copy(command[1], command[2])
                return ""
            return ""
        
        editor._run_sudo = mock_run_sudo
        
        print("–ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º):")
        initial_hooks = editor.list_hooks()
        print(f"  {initial_hooks}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º LVM - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ encrypt, –Ω–æ –¥–æ filesystems
        print("\nüéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ lvm2")
        print("–û–∂–∏–¥–∞–µ–º: —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ encrypt, –¥–æ filesystems")
        
        editor.add_hook('lvm2')
        
        # –î–æ–±–∞–≤–ª—è–µ–º resume - —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
        print("\nüéØ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ resume")  
        print("–û–∂–∏–¥–∞–µ–º: —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ encrypt/lvm2, –¥–æ filesystems")
        
        editor.add_hook('resume')
        
        final_hooks = editor.list_hooks()
        print(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {final_hooks}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫: encrypt -> lvm2 -> resume -> filesystems
        if all(hook in final_hooks for hook in ['encrypt', 'lvm2', 'resume', 'filesystems']):
            encrypt_idx = final_hooks.index('encrypt')
            lvm2_idx = final_hooks.index('lvm2')
            resume_idx = final_hooks.index('resume')
            fs_idx = final_hooks.index('filesystems')
            
            if encrypt_idx < lvm2_idx < resume_idx < fs_idx:
                print("‚úÖ –í—Å–µ —Ö—É–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ")
                print(f"   encrypt({encrypt_idx}) -> lvm2({lvm2_idx}) -> resume({resume_idx}) -> filesystems({fs_idx})")
            else:
                print("‚ùå –ü–æ—Ä—è–¥–æ–∫ —Ö—É–∫–æ–≤ –Ω–∞—Ä—É—à–µ–Ω")
        
    finally:
        test_file.unlink()


def test_rules_directly():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–ø—Ä—è–º—É—é"""
    print("\nüìö –¢–µ—Å—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é")
    print("=" * 35)
    
    rules = MkinitcpioRules()
    
    # –¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
    print("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö—É–∫–æ–≤:")
    important_hooks = ['base', 'systemd', 'plymouth', 'encrypt', 'filesystems', 'fsck']
    for hook in important_hooks:
        priority = rules.get_hook_priority(hook)
        print(f"  {hook}: {priority}")
    
    # –¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    print("\n–¢–µ—Å—Ç –∞–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:")
    messy_hooks = ['fsck', 'plymouth', 'base', 'encrypt', 'systemd']
    print(f"  –ë—ã–ª–æ: {messy_hooks}")
    sorted_hooks = rules.sort_hooks_by_priority(messy_hooks)
    print(f"  –°—Ç–∞–ª–æ: {sorted_hooks}")
    
    # –¢–µ—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    print("\n–¢–µ—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è plymouth:")
    current_hooks = ['base', 'systemd', 'autodetect', 'block', 'encrypt', 'filesystems']
    suggestion = rules.suggest_hook_placement(current_hooks, 'plymouth')
    print(f"  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ–∑–∏—Ü–∏—è: {suggestion['position']}")
    print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {suggestion['description']}")
    if suggestion['constraints']:
        print(f"  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {', '.join(suggestion['constraints'])}")


if __name__ == "__main__":
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
    print("–í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã!")
    print("=" * 60)
    
    try:
        test_smart_conflict_resolution()
        test_plymouth_smart_placement()
        test_complex_dependencies()
        test_rules_directly()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
